#!/bin/bash
#SBATCH --nodes=1                   # 1 node
#SBATCH --ntasks=1                  # total MPI tasks across nodes
#SBATCH --ntasks-per-node=1         # 8 MPI tasks on the node
#SBATCH --cpus-per-task=64           # 8 OpenMP threads per MPI task
#SBATCH --mem=0                     # use all available memory
#SBATCH --partition=GENOA
#SBATCH -t 00:01:00                 # 5 minutes
#SBATCH --exclusive                 # Get exclusive access to benchmark
#SBATCH --job-name=stencil_test

# Set the executable name
# EXEC=./stencil_parallel
EXEC=./stencil_parallel

# =======================================================
# Set OpenMP environment variables
# export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}
export OMP_NUM_THREADS=1
export OMP_PLACES=cores
# export OMP_PROC_BIND=spread
export OMP_PROC_BIND=close
export OMP_DISPLAY_AFFINITY=TRUE

# Loading necessary module
module load openMPI/5.0.5

# Set the total number of MPI tasks
TOTAL_MPI_TASKS=${SLURM_NTASKS}

# Log the layout
lscpu > cpu_layout_thin.log

# Define the arguments for the executable
# A medium-sized grid suitable for a single-node run
ARGS="-x 20000 -y 20000 -n 50 -o 0"

# Print run information
echo "Running on a single node with ${TOTAL_MPI_TASKS} MPI tasks."
echo "Each task uses ${OMP_NUM_THREADS} OpenMP threads."

# Compiling with logging the serial version
make MODE=parallel TILE=1

# Run the code using mpirun
$EXEC $ARGS > ${OMP_NUM_THREADS}_TILED.log

# Clean
make clean

# Compiling with logging the serial version
make MODE=parallel TILE=0
$EXEC $ARGS > genoa/${OMP_NUM_THREADS}_NOT_TILED.log

# Clean up after
make clean
